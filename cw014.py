# Вы должны написать простой декодер азбуки Морзе. В то время как
# Азбука Морзе в настоящее время в основном вытесняется голосом и цифровыми
# данными, она все еще используется в некоторых приложениях.
#
# Код Морзе кодирует каждый символ как последовательность «точек» и
# «тире». Например, буква A кодируется как ·−, буква Q кодируется
# как −−·−, а цифра 1 кодируется как ·−−−−.
# Азбука Морзе нечувствительна к регистру, традиционно используются заглавные
# буквы.
# Когда сообщение написано на Азбука Морзе, один пробел используется для
# разделения символов и 3 пробела используются для разделения слов.
# Например, сообщение HEY JUDE на Азбуке Морзе выглядит так
# ···· · −·−−   ·−−− ··− −·· ·
#
# ПРИМЕЧАНИЕ. Лишние пробелы до или после кода не имеют значения и должны быть
# удалены.
#
# Помимо букв, цифр и некоторых знаков препинания, имеются специальные
# служебные коды, самый известный из них – международный
# сигнал бедствия SOS (впервые изданный Титаником), закодированный
# как ···−−−···. Эти специальные коды рассматриваются как отдельные
# специальные коды символов, и обычно передаются как отдельные слова.
#
# Ваша задача — реализовать функцию, которая воспринимала бы азбуку Морзе
# и возвращала декодированную строку.
#
# Например:
# decode_morse('.... .-.-- .--- ..- -.. .')
# #должен возвращать "ЭЙ, ДЖУД"
# ПРИМЕЧАНИЕ. В целях кодирования вы должны использовать символы ASCII, а не
# символы Юникода.

CODE = {
    'A': '.-',
    'B': '-...',
    'C': '-.-.',
    'D': '-..',
    'E': '.',
    'F': '..-.',
    'G': '--.',
    'H': '....',
    'I': '..',
    'J': '.---',
    'K': '-.-',
    'L': '.-..',
    'M': '--',
    'N': '-.',
    'O': '---',
    'P': '.--.',
    'Q': '--.-',
    'R': '.-.',
    'S': '...',
    'T': '-',
    'U': '..-',
    'V': '...-',
    'W': '.--',
    'X': '-..-',
    'Y': '-.--',
    'Z': '--..',
    '1': '.----',
    '2': '..---',
    '3': '...--',
    '4': '....-',
    '5': '.....',
    '6': '-....',
    '7': '--...',
    '8': '---..',
    '9': '----.',
    '0': '-----',
}
DECODE = {
    '.-': 'A', '-...': 'B', '-.-.': 'C', '-..': 'D', '.': 'E',
    '..-.': 'F', '--.': 'G', '....': 'H', '..': 'I', '.---': 'J',
    '-.-': 'K', '.-..': 'L', '--': 'M', '-.': 'N', '---': 'O',
    '.--.': 'P', '--.-': 'Q', '.-.': 'R', '...': 'S', '-': 'T',
    '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', '-.--': 'Y',
    '--..': 'Z', '.----': '1', '..---': '2', '...--': '3',
    '....-': '4', '.....': '5', '-....': '6', '--...': '7',
    '---..': '8', '----.': '9', '-----': '0'
}


def Decode(msg):
    value = CODE.keys()
    key = CODE.values()
    DECODE = dict(zip(key, value))
    print(DECODE)
    # msg = self.contents.GetValue()
    # self.coder.Clear()
    msg1 = msg.split()
    text = []
    for str in msg1:
        if str in DECODE.keys():
            text.append(DECODE[str])

    return text
    # coder.write("%s " % (text))

def to_morse(words):
    code = ""
    for char in words.upper():
        code += f' {LETTERS_TO_MC[char]} '
    # endfor
    return code
# enddef

def from_morse(code):
    lRes = code.split()
    print(lRes)
    for i in lRes:
        pass


# enddef

if __name__ == "__main__":
    print(Decode('.... . -.--   .--- ..- -.. .'))
    # print(to_morse("SOS"))
    # print(to_morse("Sos"))
    # print(to_morse("SoS"))
    # assert decode_morse('.... . -.--   .--- ..- -.. .') == 'HEY JUDE'
# endif

# def decode_morse(morse_code):
#     # ToDo: Accept dots, dashes and spaces, return human-readable message
#     return morse_code.replace('.', MORSE_CODE['.'])\
#         .replace('-',  MORSE_CODE['-']).replace(' ', '')
