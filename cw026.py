# Я, и мой друг Джон, являемся членами клуба «Fat to Fit Club (FFC)».
# Джон беспокоится, потому что каждый месяц публикуется список с весами
# участников, и каждый месяц он последний в списке, что означает, что он
# самый тяжелый.
#
# Я составляю этот список, поэтому сказал ему: «Не волнуйся больше, я изменю
# порядок списка». Было решено приписать числам «вес». Отныне вес числа
# будет равен сумме его цифр.
#
# Например, 99 будет иметь «вес» 18, 100 будет иметь «вес» 1, поэтому в
# списке 100 будет стоять перед 99.
# Учитывая строку с весами членов FFC в нормальном порядке, можете ли вы
# отсортировать эту строку по «весам» этих чисел?
# Пример:
# "56 65 74 100 99 68 86 180 90",
# упорядоченные по номерам весов, становятся:
# "100 180 90 56 65 74 68 86 99"
# Когда два числа имеют одинаковый «вес», давайте классифицируем их так,
# как если бы они были строками (в алфавитном порядке), а не числами:
# "180" предшествует "90", так как, имея тот же «вес» (9), оно предшествует
# строке "90".
# Все числа в списке положительные и список может быть пустым.
# Заметки
# может случиться так, что входная строка содержит начальные и конечные
# пробелы, а также более чем один уникальный пробел между двумя
# последовательными числами.
# В следующем примере, в списке x представлена последовательность чисел в
# качестве строк. При простой сортировке будет использоваться
# лексикографическое сравнение.
#
# x = ['55', '11', '25', '15', '9']
# x.sort()
# x
# ['11', '15', '25', '55', '9']

# Применим в качестве ключевой функции для сравнения класс int(), для
# преобразования строк в целые числа, что бы упорядочить последовательность
# строк так, как будто это список чисел.

# x = ['55', '11', '25', '15', '9']
# x.sort(key=int)
# x
# ['9', '11', '15', '25', '55']


# Потрясающие решения
# def order_weight(s):
#     return ' '.join(sorted(sorted(s.split(' ')),
#         key=lambda x: sum(int(c) for c in x)))
# # enddef


def order_weight(s):
    return ' '.join(sorted(s.split(), key=lambda x: (sum(map(int, x)), x)))
# enddef


if __name__ == "__main__":
    assert order_weight(
        "   103   123 4444 99 2000   "
    ) == "2000 103 123 4444 99"
    assert order_weight(
        "  103   123 4444 99 2000"
    ) == "2000 103 123 4444 99"
    assert order_weight(
        "56 65 74 100 99 68 86 180 90"
    ) == "100 180 90 56 65 74 68 86 99"
    assert order_weight(
        "2000 10003 1234000 44444444 9999 11 11 22 123"
    ) == "11 11 2000 10003 22 123 1234000 44444444 9999"
    assert order_weight("") == ""
# endif
